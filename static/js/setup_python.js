var setup_code="def get_class_or_type(obj):\n    if hasattr(obj, '__class__'):\n        return obj.__class__\n    return type(obj)\n\nclass Vertex:\n\n    def __init__(self, graph, label):\n        self.graph = graph\n        self.label = label\n        self.incoming = {}\n        self.outgoing = {}\n\n\n    def add_incoming(self, edge):\n        self.incoming[edge.source_label] = edge\n\n    def incoming(self, edge_or_source):\n        if get_class_or_type(edge_or_source) != Edge:\n            return self.incoming.get(str(edge_or_source))\n        if self.incoming.get(edge_or_source.source_label):\n            return edge_or_source\n\n    def remove_incoming(self, edge):\n        edge = self.incoming(edge)\n        if edge:\n            del self.incoming[edge.source_label]\n\n    def incoming_edges(self):\n        return self.incoming.values()\n\n    def add_outgoing(self, edge):\n        self.outgoing[edge.target_label] = edge\n\n    def outgoing(self, edge_or_target):\n        if get_class_or_type(edge_or_target) != Edge:\n            return self.outgoing.get(str(edge_or_target))\n        if self.outgoing.get(edge_or_target.target_label):\n            return edge_or_target\n\n    def remove_outgoing(self, edge):\n        edge = self.outgoing(edge)\n        if edge:\n            del self.outgoing[edge.target_label]\n\n    def outgoing_edges(self):\n        return self.outgoing.values()\n\n\n    def __repr__(self):\n        return 'Vertex<' + self.label + '>'\n\nclass Edge:\n\n    def __init__(self, graph, source, target, weight = 1):\n        self.graph = graph\n        self.source = source\n        self.target = target\n        self.source_label = source.label\n        self.target_label = target.label\n        self.label = self.source_label + ',' + self.target_label\n        self.weight = weight\n        source.add_outgoing(self)\n        target.add_incoming(self)\n\n    def other(self, vertex):\n        if vertex == self.source:\n            return self.target\n        elif vertex == self.target:\n            return self.source\n\n    def __repr__(self):\n        return 'Edge<' + self.label + '>'\n\nclass Graph:\n    def __init__(self, name='G'):\n        self.name = name\n        self.vertices = {}\n        self.edges = {}\n\n    def __getattr__(self, attrname):\n        attrname = str(attrname)\n        if attrname == 'E':\n            return self.edges.values()\n        elif attrname == 'V':\n            return self.vertices.values()\n        raise AttributeError('Graph instance has no attribute ' + attrname)\n\n    def vertex(self, vertex_or_label):\n        if get_class_or_type(vertex_or_label) != Vertex:\n            return self.vertices.get(str(vertex_or_label))\n        if self.vertices.get(vertex_or_label.label):\n            return vertex_or_label\n\n    def add_vertex(self, label):\n        label = str(label)\n        newVertex = Vertex(self, label)\n        self.vertices[newVertex.label] = newVertex\n\n    def remove_vertex(self, vertex):\n        vertex = self.vertex(vertex)\n        if not vertex:\n            return\n        for inc in vertex.incoming_edges():\n            self.remove_edge(inc)\n        for out in vertex.outgoing_edges():\n            self.remove_edge(out)\n        del self.vertices[vertex.label]\n        del vertex\n\n\n    def edge(self, edge_or_source, target_label):\n        if get_class_or_type(edge_or_source) != Edge:\n            return self.edges.get((str(edge_or_source), str(target_label)))\n        if self.edges.get((edge_or_source.source_label,\n                edge_or_source.target_label)):\n            return edge_or_source\n\n    def add_edge(self, source, target, weight = 1):\n        if get_class_or_type(source) != Vertex:\n            source = self.vertices.get(str(source))\n        if get_class_or_type(target) != Vertex:\n            target = self.vertices.get(str(target))\n        if not source or not target:\n            return\n        newEdge = Edge(self, source, target, weight)\n        self.edges[(newEdge.source_label, newEdge.target_label)] = newEdge\n\n    def remove_edge(self, edge, target_label = None):\n        edge = self.edge(edge, target_label)\n        if not edge:\n            return\n        edge.source.remove_outgoing(edge)\n        edge.target.remove_incoming(edge)\n        del self.edges[(edge.source_label, edge.target_label)]\n        del edge\n\n\n# constants and imports\ninf = float('inf')\nG = Graph()\nfrom graph import *\n"

var translate_graph = function() {
    var graph_string = "";
    var vertexList = graph.vertexList();
    var i;
    for (i = 0; i < vertexList.length; i++) {
        graph_string += "G.add_vertex(" + vertexList[i].label + ")\n";
    }
    var edgeList = graph.edgeList();
    var edge, edgeStr;
    for (i = 0; i < edgeList.length; i++) {
        edge = edgeList[i];
        edgeStr = "G.add_edge(" + edge.sourceLabel() + ", " + edge.targetLabel();
        if (weightsEnabled) {
            edgeStr += ", " + edge.weight + ")\n";
        } else {
            edgeStr += ")\n";
        }
        graph_string += edgeStr;
    }
    return graph_string;
}
